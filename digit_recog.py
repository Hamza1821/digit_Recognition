# -*- coding: utf-8 -*-
"""digit_recog.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1skcS2HrzUcrOOUBCM-Hv9-N2if7rj1Nm
"""

import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow import keras
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Flatten, Dense
from tensorflow.keras.preprocessing import image

(X_train, Y_train),( X_test, Y_test)=keras.datasets.mnist.load_data()

print(X_train.shape)
print(Y_train.shape)
print(X_test.shape)
print(Y_test.shape)

plt.imshow(X_train[0])

model=Sequential()

model.add(Flatten(input_shape=(28,28)))

model.add(Dense(128,activation='relu'))
model.add(Dense(10,activation='softmax'))

model.summary()

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

model.fit(X_train,Y_train,epochs=20)

model.evaluate(X_test,Y_test)

predictions=model.predict(X_test)

predicted_classes = np.argmax(predictions, axis=1)

print(predicted_classes)

img_path = 'testnum5.png'
img = image.load_img(img_path, target_size=(28, 28), color_mode='grayscale')  # Ensure it's grayscale

# Convert the image to a numpy array
img =np.asarray(img)

# Display the image


# Normalize the image

# Add a batch dimension but do not flatten the image
img=255-img
plt.imshow(img, cmap='gray')
plt.show()
img=img.reshape(1,-1)


# Ensure the image has the correct shape (batch_size, height, width)
# Note: Not adding channel dimension as model expects (None, 28, 28)
predictions = model.predict(img)

# Convert the predicted probabilities to class indices
predicted_class = np.argmax(predictions, axis=1)

print(predictions)
print(f'Predicted class: {predicted_class[0]}')



